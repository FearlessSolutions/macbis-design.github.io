/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface BannerComponent {
        "action": string;
        "headline": string;
        "img": string;
    }
    interface BigFooter {
        "bottomBg"?: "blue" | "gray" | "light-gray" | "black";
        "bottomColor"?: "white";
        "hasBorders": boolean;
        "showInspect": boolean;
        "sitemap": boolean;
        "topBg"?: "blue" | "gray" | "light-gray" | "black";
        "topLeftColor"?: "blue" | "white";
        "topRightColor"?: "white";
    }
    interface ButtonComponent {
        "colorScheme": "yellow" | "red" | "green" | "sky" | "blue";
        "disabled": boolean;
        "leftIcon": boolean;
        "rightIcon": boolean;
        "size": "sm" | "base" | "md";
        "type": "reset" | "submit" | "button";
        "variant": "solid" | "ghost" | "outline";
    }
    interface CheckboxComponent {
        "checked": boolean;
        "disabled": boolean;
        "label"?: string;
    }
    interface DropdownButton {
        "buttonLabel": string;
        "theme": "blue" | "dark-blue";
    }
    interface DropdownComponent {
    }
    interface DropdownLink {
        "col": number;
        "panelSize": "full" | "contain";
        "panelTheme": "white" | "blue";
        "text": string;
        "theme": "blue" | "white" | "dark-blue";
    }
    interface DropdownPanelLink {
    }
    interface DropdownPanelSection {
    }
    interface FooterComponent {
        "bottomBg"?: "blue" | "gray" | "black" | "light-gray";
        "bottomColor"?: "white";
        "filled": boolean;
        "flexCol": boolean;
        "hasBorder": boolean;
        "hasBorders": boolean;
        "showAbovePart": boolean;
        "showAddress": boolean;
        "showInspect": boolean;
        "topBg"?: "blue" | "gray" | "black" | "light-gray";
        "topLeftColor": "blue" | "white";
        "topRightColor"?: "white";
    }
    interface HeaderComponent {
        "accountContainer": boolean;
        "accountContainerTheme": "white" | "blue" | "dark";
        "accountLabel": string;
        "headerLogo": string;
        "headerLogoDash": boolean;
        "headerLogoDashTheme": "blue" | "white";
        "headerLogoStretched": boolean;
        "headerLogoTheme": "white" | "blue" | "dark";
        "navInlinePosition": "right" | "left";
        "navLocation": "below" | "inline" | "none";
        "navSeparator": boolean;
        "navSeparatorTheme": "blue" | "white";
        "navTheme": "white" | "blue" | "dark";
        "searchTextTheme": "white" | "blue" | "dark";
        "searchTheme": "white" | "blue" | "dark";
        "showSearch": boolean;
        "size": "slim" | "normal";
        "theme": "white" | "blue" | "dark";
    }
    interface InputComponent {
        "disabled": boolean;
        "label": string;
        "placeholder": string;
        "state": "error" | "success" | "default";
        "type": string;
    }
    interface RadioButton {
        "checked": boolean;
        "disabled": boolean;
        "label"?: string;
    }
    interface SectionComponent {
        "sectionButtonLabel": string;
    }
    interface SelectComponent {
        "disabled": boolean;
        "label"?: string;
        "options": string[];
        "state": "error" | "success" | "default";
    }
    interface TextareaComponent {
        "cols"?: number;
        "disabled": boolean;
        "label"?: string;
        "placeholder"?: string;
        "rows"?: number;
        "state": "error" | "success" | "default";
    }
}
declare global {
    interface HTMLBannerComponentElement extends Components.BannerComponent, HTMLStencilElement {
    }
    var HTMLBannerComponentElement: {
        prototype: HTMLBannerComponentElement;
        new (): HTMLBannerComponentElement;
    };
    interface HTMLBigFooterElement extends Components.BigFooter, HTMLStencilElement {
    }
    var HTMLBigFooterElement: {
        prototype: HTMLBigFooterElement;
        new (): HTMLBigFooterElement;
    };
    interface HTMLButtonComponentElement extends Components.ButtonComponent, HTMLStencilElement {
    }
    var HTMLButtonComponentElement: {
        prototype: HTMLButtonComponentElement;
        new (): HTMLButtonComponentElement;
    };
    interface HTMLCheckboxComponentElement extends Components.CheckboxComponent, HTMLStencilElement {
    }
    var HTMLCheckboxComponentElement: {
        prototype: HTMLCheckboxComponentElement;
        new (): HTMLCheckboxComponentElement;
    };
    interface HTMLDropdownButtonElement extends Components.DropdownButton, HTMLStencilElement {
    }
    var HTMLDropdownButtonElement: {
        prototype: HTMLDropdownButtonElement;
        new (): HTMLDropdownButtonElement;
    };
    interface HTMLDropdownComponentElement extends Components.DropdownComponent, HTMLStencilElement {
    }
    var HTMLDropdownComponentElement: {
        prototype: HTMLDropdownComponentElement;
        new (): HTMLDropdownComponentElement;
    };
    interface HTMLDropdownLinkElement extends Components.DropdownLink, HTMLStencilElement {
    }
    var HTMLDropdownLinkElement: {
        prototype: HTMLDropdownLinkElement;
        new (): HTMLDropdownLinkElement;
    };
    interface HTMLDropdownPanelLinkElement extends Components.DropdownPanelLink, HTMLStencilElement {
    }
    var HTMLDropdownPanelLinkElement: {
        prototype: HTMLDropdownPanelLinkElement;
        new (): HTMLDropdownPanelLinkElement;
    };
    interface HTMLDropdownPanelSectionElement extends Components.DropdownPanelSection, HTMLStencilElement {
    }
    var HTMLDropdownPanelSectionElement: {
        prototype: HTMLDropdownPanelSectionElement;
        new (): HTMLDropdownPanelSectionElement;
    };
    interface HTMLFooterComponentElement extends Components.FooterComponent, HTMLStencilElement {
    }
    var HTMLFooterComponentElement: {
        prototype: HTMLFooterComponentElement;
        new (): HTMLFooterComponentElement;
    };
    interface HTMLHeaderComponentElement extends Components.HeaderComponent, HTMLStencilElement {
    }
    var HTMLHeaderComponentElement: {
        prototype: HTMLHeaderComponentElement;
        new (): HTMLHeaderComponentElement;
    };
    interface HTMLInputComponentElement extends Components.InputComponent, HTMLStencilElement {
    }
    var HTMLInputComponentElement: {
        prototype: HTMLInputComponentElement;
        new (): HTMLInputComponentElement;
    };
    interface HTMLRadioButtonElement extends Components.RadioButton, HTMLStencilElement {
    }
    var HTMLRadioButtonElement: {
        prototype: HTMLRadioButtonElement;
        new (): HTMLRadioButtonElement;
    };
    interface HTMLSectionComponentElement extends Components.SectionComponent, HTMLStencilElement {
    }
    var HTMLSectionComponentElement: {
        prototype: HTMLSectionComponentElement;
        new (): HTMLSectionComponentElement;
    };
    interface HTMLSelectComponentElement extends Components.SelectComponent, HTMLStencilElement {
    }
    var HTMLSelectComponentElement: {
        prototype: HTMLSelectComponentElement;
        new (): HTMLSelectComponentElement;
    };
    interface HTMLTextareaComponentElement extends Components.TextareaComponent, HTMLStencilElement {
    }
    var HTMLTextareaComponentElement: {
        prototype: HTMLTextareaComponentElement;
        new (): HTMLTextareaComponentElement;
    };
    interface HTMLElementTagNameMap {
        "banner-component": HTMLBannerComponentElement;
        "big-footer": HTMLBigFooterElement;
        "button-component": HTMLButtonComponentElement;
        "checkbox-component": HTMLCheckboxComponentElement;
        "dropdown-button": HTMLDropdownButtonElement;
        "dropdown-component": HTMLDropdownComponentElement;
        "dropdown-link": HTMLDropdownLinkElement;
        "dropdown-panel-link": HTMLDropdownPanelLinkElement;
        "dropdown-panel-section": HTMLDropdownPanelSectionElement;
        "footer-component": HTMLFooterComponentElement;
        "header-component": HTMLHeaderComponentElement;
        "input-component": HTMLInputComponentElement;
        "radio-button": HTMLRadioButtonElement;
        "section-component": HTMLSectionComponentElement;
        "select-component": HTMLSelectComponentElement;
        "textarea-component": HTMLTextareaComponentElement;
    }
}
declare namespace LocalJSX {
    interface BannerComponent {
        "action"?: string;
        "headline"?: string;
        "img"?: string;
    }
    interface BigFooter {
        "bottomBg"?: "blue" | "gray" | "light-gray" | "black";
        "bottomColor"?: "white";
        "hasBorders"?: boolean;
        "showInspect"?: boolean;
        "sitemap"?: boolean;
        "topBg"?: "blue" | "gray" | "light-gray" | "black";
        "topLeftColor"?: "blue" | "white";
        "topRightColor"?: "white";
    }
    interface ButtonComponent {
        "colorScheme"?: "yellow" | "red" | "green" | "sky" | "blue";
        "disabled"?: boolean;
        "leftIcon"?: boolean;
        "rightIcon"?: boolean;
        "size"?: "sm" | "base" | "md";
        "type"?: "reset" | "submit" | "button";
        "variant"?: "solid" | "ghost" | "outline";
    }
    interface CheckboxComponent {
        "checked"?: boolean;
        "disabled"?: boolean;
        "label"?: string;
    }
    interface DropdownButton {
        "buttonLabel"?: string;
        "theme"?: "blue" | "dark-blue";
    }
    interface DropdownComponent {
    }
    interface DropdownLink {
        "col"?: number;
        "panelSize"?: "full" | "contain";
        "panelTheme"?: "white" | "blue";
        "text"?: string;
        "theme"?: "blue" | "white" | "dark-blue";
    }
    interface DropdownPanelLink {
    }
    interface DropdownPanelSection {
    }
    interface FooterComponent {
        "bottomBg"?: "blue" | "gray" | "black" | "light-gray";
        "bottomColor"?: "white";
        "filled"?: boolean;
        "flexCol"?: boolean;
        "hasBorder"?: boolean;
        "hasBorders"?: boolean;
        "showAbovePart"?: boolean;
        "showAddress"?: boolean;
        "showInspect"?: boolean;
        "topBg"?: "blue" | "gray" | "black" | "light-gray";
        "topLeftColor"?: "blue" | "white";
        "topRightColor"?: "white";
    }
    interface HeaderComponent {
        "accountContainer"?: boolean;
        "accountContainerTheme"?: "white" | "blue" | "dark";
        "accountLabel"?: string;
        "headerLogo"?: string;
        "headerLogoDash"?: boolean;
        "headerLogoDashTheme"?: "blue" | "white";
        "headerLogoStretched"?: boolean;
        "headerLogoTheme"?: "white" | "blue" | "dark";
        "navInlinePosition"?: "right" | "left";
        "navLocation"?: "below" | "inline" | "none";
        "navSeparator"?: boolean;
        "navSeparatorTheme"?: "blue" | "white";
        "navTheme"?: "white" | "blue" | "dark";
        "searchTextTheme"?: "white" | "blue" | "dark";
        "searchTheme"?: "white" | "blue" | "dark";
        "showSearch"?: boolean;
        "size"?: "slim" | "normal";
        "theme"?: "white" | "blue" | "dark";
    }
    interface InputComponent {
        "disabled"?: boolean;
        "label"?: string;
        "placeholder"?: string;
        "state"?: "error" | "success" | "default";
        "type"?: string;
    }
    interface RadioButton {
        "checked"?: boolean;
        "disabled"?: boolean;
        "label"?: string;
    }
    interface SectionComponent {
        "sectionButtonLabel"?: string;
    }
    interface SelectComponent {
        "disabled"?: boolean;
        "label"?: string;
        "options"?: string[];
        "state"?: "error" | "success" | "default";
    }
    interface TextareaComponent {
        "cols"?: number;
        "disabled"?: boolean;
        "label"?: string;
        "placeholder"?: string;
        "rows"?: number;
        "state"?: "error" | "success" | "default";
    }
    interface IntrinsicElements {
        "banner-component": BannerComponent;
        "big-footer": BigFooter;
        "button-component": ButtonComponent;
        "checkbox-component": CheckboxComponent;
        "dropdown-button": DropdownButton;
        "dropdown-component": DropdownComponent;
        "dropdown-link": DropdownLink;
        "dropdown-panel-link": DropdownPanelLink;
        "dropdown-panel-section": DropdownPanelSection;
        "footer-component": FooterComponent;
        "header-component": HeaderComponent;
        "input-component": InputComponent;
        "radio-button": RadioButton;
        "section-component": SectionComponent;
        "select-component": SelectComponent;
        "textarea-component": TextareaComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "banner-component": LocalJSX.BannerComponent & JSXBase.HTMLAttributes<HTMLBannerComponentElement>;
            "big-footer": LocalJSX.BigFooter & JSXBase.HTMLAttributes<HTMLBigFooterElement>;
            "button-component": LocalJSX.ButtonComponent & JSXBase.HTMLAttributes<HTMLButtonComponentElement>;
            "checkbox-component": LocalJSX.CheckboxComponent & JSXBase.HTMLAttributes<HTMLCheckboxComponentElement>;
            "dropdown-button": LocalJSX.DropdownButton & JSXBase.HTMLAttributes<HTMLDropdownButtonElement>;
            "dropdown-component": LocalJSX.DropdownComponent & JSXBase.HTMLAttributes<HTMLDropdownComponentElement>;
            "dropdown-link": LocalJSX.DropdownLink & JSXBase.HTMLAttributes<HTMLDropdownLinkElement>;
            "dropdown-panel-link": LocalJSX.DropdownPanelLink & JSXBase.HTMLAttributes<HTMLDropdownPanelLinkElement>;
            "dropdown-panel-section": LocalJSX.DropdownPanelSection & JSXBase.HTMLAttributes<HTMLDropdownPanelSectionElement>;
            "footer-component": LocalJSX.FooterComponent & JSXBase.HTMLAttributes<HTMLFooterComponentElement>;
            "header-component": LocalJSX.HeaderComponent & JSXBase.HTMLAttributes<HTMLHeaderComponentElement>;
            "input-component": LocalJSX.InputComponent & JSXBase.HTMLAttributes<HTMLInputComponentElement>;
            "radio-button": LocalJSX.RadioButton & JSXBase.HTMLAttributes<HTMLRadioButtonElement>;
            "section-component": LocalJSX.SectionComponent & JSXBase.HTMLAttributes<HTMLSectionComponentElement>;
            "select-component": LocalJSX.SelectComponent & JSXBase.HTMLAttributes<HTMLSelectComponentElement>;
            "textarea-component": LocalJSX.TextareaComponent & JSXBase.HTMLAttributes<HTMLTextareaComponentElement>;
        }
    }
}
